//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("RemoteHealth", "PatientPatientIdentifiers", "Patient", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(RemoteHealth.Data.Patient), "PatientIdentifiers", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RemoteHealth.Data.PatientIdentifiers), true)]
[assembly: EdmRelationshipAttribute("RemoteHealth", "VisitLocation", "Visit", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(RemoteHealth.Data.Visit), "Location", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(RemoteHealth.Data.Location))]
[assembly: EdmRelationshipAttribute("RemoteHealth", "VisitClinicians", "Visit", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(RemoteHealth.Data.Visit), "Clinicians", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RemoteHealth.Data.Clinicians))]
[assembly: EdmRelationshipAttribute("RemoteHealth", "NotesClinicians", "Notes", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(RemoteHealth.Data.Note), "Clinicians", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(RemoteHealth.Data.Clinicians))]
[assembly: EdmRelationshipAttribute("RemoteHealth", "VisitVisitNotes", "Visit", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(RemoteHealth.Data.Visit), "VisitNotes", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RemoteHealth.Data.VisitNote), true)]
[assembly: EdmRelationshipAttribute("RemoteHealth", "PatientPatientNotes", "Patient", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(RemoteHealth.Data.Patient), "PatientNotes", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RemoteHealth.Data.PatientNote), true)]
[assembly: EdmRelationshipAttribute("RemoteHealth", "HealthItemTypeHealthItem", "HealthItemType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(RemoteHealth.Data.HealthItemType), "HealthItem", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(RemoteHealth.Data.HealthItem))]
[assembly: EdmRelationshipAttribute("RemoteHealth", "VisitHealthItem", "Visit", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(RemoteHealth.Data.Visit), "HealthItem", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RemoteHealth.Data.HealthItem), true)]
[assembly: EdmRelationshipAttribute("RemoteHealth", "HealthItemHealthItemNote", "HealthItem", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(RemoteHealth.Data.HealthItem), "HealthItemNote", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RemoteHealth.Data.HealthItemNote), true)]

#endregion

namespace RemoteHealth.Data
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class RemoteHealthDataProvider : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new RemoteHealthDataProvider object using the connection string found in the 'RemoteHealthDataProvider' section of the application configuration file.
        /// </summary>
        public RemoteHealthDataProvider() : base("name=RemoteHealthDataProvider", "RemoteHealthDataProvider")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new RemoteHealthDataProvider object.
        /// </summary>
        public RemoteHealthDataProvider(string connectionString) : base(connectionString, "RemoteHealthDataProvider")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new RemoteHealthDataProvider object.
        /// </summary>
        public RemoteHealthDataProvider(EntityConnection connection) : base(connection, "RemoteHealthDataProvider")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Patient> Patients
        {
            get
            {
                if ((_Patients == null))
                {
                    _Patients = base.CreateObjectSet<Patient>("Patients");
                }
                return _Patients;
            }
        }
        private ObjectSet<Patient> _Patients;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<PatientIdentifiers> PatientIdentifiers
        {
            get
            {
                if ((_PatientIdentifiers == null))
                {
                    _PatientIdentifiers = base.CreateObjectSet<PatientIdentifiers>("PatientIdentifiers");
                }
                return _PatientIdentifiers;
            }
        }
        private ObjectSet<PatientIdentifiers> _PatientIdentifiers;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Visit> Visits
        {
            get
            {
                if ((_Visits == null))
                {
                    _Visits = base.CreateObjectSet<Visit>("Visits");
                }
                return _Visits;
            }
        }
        private ObjectSet<Visit> _Visits;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Location> Locations
        {
            get
            {
                if ((_Locations == null))
                {
                    _Locations = base.CreateObjectSet<Location>("Locations");
                }
                return _Locations;
            }
        }
        private ObjectSet<Location> _Locations;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Clinicians> Clinicians
        {
            get
            {
                if ((_Clinicians == null))
                {
                    _Clinicians = base.CreateObjectSet<Clinicians>("Clinicians");
                }
                return _Clinicians;
            }
        }
        private ObjectSet<Clinicians> _Clinicians;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Note> Notes
        {
            get
            {
                if ((_Notes == null))
                {
                    _Notes = base.CreateObjectSet<Note>("Notes");
                }
                return _Notes;
            }
        }
        private ObjectSet<Note> _Notes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<HealthItem> HealthItems
        {
            get
            {
                if ((_HealthItems == null))
                {
                    _HealthItems = base.CreateObjectSet<HealthItem>("HealthItems");
                }
                return _HealthItems;
            }
        }
        private ObjectSet<HealthItem> _HealthItems;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<HealthItemType> HealthItemTypes
        {
            get
            {
                if ((_HealthItemTypes == null))
                {
                    _HealthItemTypes = base.CreateObjectSet<HealthItemType>("HealthItemTypes");
                }
                return _HealthItemTypes;
            }
        }
        private ObjectSet<HealthItemType> _HealthItemTypes;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Patients EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPatients(Patient patient)
        {
            base.AddObject("Patients", patient);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the PatientIdentifiers EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPatientIdentifiers(PatientIdentifiers patientIdentifiers)
        {
            base.AddObject("PatientIdentifiers", patientIdentifiers);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Visits EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToVisits(Visit visit)
        {
            base.AddObject("Visits", visit);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Locations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLocations(Location location)
        {
            base.AddObject("Locations", location);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Clinicians EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToClinicians(Clinicians clinicians)
        {
            base.AddObject("Clinicians", clinicians);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Notes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToNotes(Note note)
        {
            base.AddObject("Notes", note);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the HealthItems EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToHealthItems(HealthItem healthItem)
        {
            base.AddObject("HealthItems", healthItem);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the HealthItemTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToHealthItemTypes(HealthItemType healthItemType)
        {
            base.AddObject("HealthItemTypes", healthItemType);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="RemoteHealth", Name="Clinicians")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Clinicians : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Clinicians object.
        /// </summary>
        /// <param name="clinicianId">Initial value of the ClinicianId property.</param>
        /// <param name="lastName">Initial value of the LastName property.</param>
        /// <param name="firstName">Initial value of the FirstName property.</param>
        public static Clinicians CreateClinicians(global::System.Guid clinicianId, global::System.String lastName, global::System.String firstName)
        {
            Clinicians clinicians = new Clinicians();
            clinicians.ClinicianId = clinicianId;
            clinicians.LastName = lastName;
            clinicians.FirstName = firstName;
            return clinicians;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid ClinicianId
        {
            get
            {
                return _ClinicianId;
            }
            set
            {
                if (_ClinicianId != value)
                {
                    OnClinicianIdChanging(value);
                    ReportPropertyChanging("ClinicianId");
                    _ClinicianId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ClinicianId");
                    OnClinicianIdChanged();
                }
            }
        }
        private global::System.Guid _ClinicianId;
        partial void OnClinicianIdChanging(global::System.Guid value);
        partial void OnClinicianIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LastName
        {
            get
            {
                return _LastName;
            }
            set
            {
                OnLastNameChanging(value);
                ReportPropertyChanging("LastName");
                _LastName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LastName");
                OnLastNameChanged();
            }
        }
        private global::System.String _LastName;
        partial void OnLastNameChanging(global::System.String value);
        partial void OnLastNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FirstName
        {
            get
            {
                return _FirstName;
            }
            set
            {
                OnFirstNameChanging(value);
                ReportPropertyChanging("FirstName");
                _FirstName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FirstName");
                OnFirstNameChanged();
            }
        }
        private global::System.String _FirstName;
        partial void OnFirstNameChanging(global::System.String value);
        partial void OnFirstNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ClinicianRole
        {
            get
            {
                return _ClinicianRole;
            }
            set
            {
                OnClinicianRoleChanging(value);
                ReportPropertyChanging("ClinicianRole");
                _ClinicianRole = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ClinicianRole");
                OnClinicianRoleChanged();
            }
        }
        private Nullable<global::System.Int32> _ClinicianRole;
        partial void OnClinicianRoleChanging(Nullable<global::System.Int32> value);
        partial void OnClinicianRoleChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="RemoteHealth", Name="HealthItem")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class HealthItem : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new HealthItem object.
        /// </summary>
        /// <param name="healthItemId">Initial value of the HealthItemId property.</param>
        /// <param name="createdDate">Initial value of the CreatedDate property.</param>
        /// <param name="updatedDate">Initial value of the UpdatedDate property.</param>
        /// <param name="healthItemData">Initial value of the HealthItemData property.</param>
        /// <param name="visitVisitId">Initial value of the VisitVisitId property.</param>
        public static HealthItem CreateHealthItem(global::System.Guid healthItemId, global::System.DateTime createdDate, global::System.DateTime updatedDate, global::System.String healthItemData, global::System.Guid visitVisitId)
        {
            HealthItem healthItem = new HealthItem();
            healthItem.HealthItemId = healthItemId;
            healthItem.CreatedDate = createdDate;
            healthItem.UpdatedDate = updatedDate;
            healthItem.HealthItemData = healthItemData;
            healthItem.VisitVisitId = visitVisitId;
            return healthItem;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid HealthItemId
        {
            get
            {
                return _HealthItemId;
            }
            set
            {
                if (_HealthItemId != value)
                {
                    OnHealthItemIdChanging(value);
                    ReportPropertyChanging("HealthItemId");
                    _HealthItemId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("HealthItemId");
                    OnHealthItemIdChanged();
                }
            }
        }
        private global::System.Guid _HealthItemId;
        partial void OnHealthItemIdChanging(global::System.Guid value);
        partial void OnHealthItemIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime CreatedDate
        {
            get
            {
                return _CreatedDate;
            }
            set
            {
                OnCreatedDateChanging(value);
                ReportPropertyChanging("CreatedDate");
                _CreatedDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedDate");
                OnCreatedDateChanged();
            }
        }
        private global::System.DateTime _CreatedDate;
        partial void OnCreatedDateChanging(global::System.DateTime value);
        partial void OnCreatedDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime UpdatedDate
        {
            get
            {
                return _UpdatedDate;
            }
            set
            {
                OnUpdatedDateChanging(value);
                ReportPropertyChanging("UpdatedDate");
                _UpdatedDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UpdatedDate");
                OnUpdatedDateChanged();
            }
        }
        private global::System.DateTime _UpdatedDate;
        partial void OnUpdatedDateChanging(global::System.DateTime value);
        partial void OnUpdatedDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String HealthItemData
        {
            get
            {
                return _HealthItemData;
            }
            set
            {
                OnHealthItemDataChanging(value);
                ReportPropertyChanging("HealthItemData");
                _HealthItemData = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("HealthItemData");
                OnHealthItemDataChanged();
            }
        }
        private global::System.String _HealthItemData;
        partial void OnHealthItemDataChanging(global::System.String value);
        partial void OnHealthItemDataChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.Byte[] HealthItemVersion
        {
            get
            {
                return StructuralObject.GetValidValue(_HealthItemVersion);
            }
            set
            {
                OnHealthItemVersionChanging(value);
                ReportPropertyChanging("HealthItemVersion");
                _HealthItemVersion = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("HealthItemVersion");
                OnHealthItemVersionChanged();
            }
        }
        private global::System.Byte[] _HealthItemVersion;
        partial void OnHealthItemVersionChanging(global::System.Byte[] value);
        partial void OnHealthItemVersionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid VisitVisitId
        {
            get
            {
                return _VisitVisitId;
            }
            set
            {
                OnVisitVisitIdChanging(value);
                ReportPropertyChanging("VisitVisitId");
                _VisitVisitId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("VisitVisitId");
                OnVisitVisitIdChanged();
            }
        }
        private global::System.Guid _VisitVisitId;
        partial void OnVisitVisitIdChanging(global::System.Guid value);
        partial void OnVisitVisitIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RemoteHealth", "HealthItemTypeHealthItem", "HealthItemType")]
        public HealthItemType HealthItemType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HealthItemType>("RemoteHealth.HealthItemTypeHealthItem", "HealthItemType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HealthItemType>("RemoteHealth.HealthItemTypeHealthItem", "HealthItemType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<HealthItemType> HealthItemTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HealthItemType>("RemoteHealth.HealthItemTypeHealthItem", "HealthItemType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<HealthItemType>("RemoteHealth.HealthItemTypeHealthItem", "HealthItemType", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RemoteHealth", "VisitHealthItem", "Visit")]
        public Visit Visit
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Visit>("RemoteHealth.VisitHealthItem", "Visit").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Visit>("RemoteHealth.VisitHealthItem", "Visit").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Visit> VisitReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Visit>("RemoteHealth.VisitHealthItem", "Visit");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Visit>("RemoteHealth.VisitHealthItem", "Visit", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RemoteHealth", "HealthItemHealthItemNote", "HealthItemNote")]
        public EntityCollection<HealthItemNote> HealthItemNotes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<HealthItemNote>("RemoteHealth.HealthItemHealthItemNote", "HealthItemNote");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<HealthItemNote>("RemoteHealth.HealthItemHealthItemNote", "HealthItemNote", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="RemoteHealth", Name="HealthItemNote")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class HealthItemNote : Note
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new HealthItemNote object.
        /// </summary>
        /// <param name="noteId">Initial value of the NoteId property.</param>
        /// <param name="createdDate">Initial value of the CreatedDate property.</param>
        /// <param name="updatedDate">Initial value of the UpdatedDate property.</param>
        /// <param name="isActive">Initial value of the IsActive property.</param>
        /// <param name="healthItemHealthItemId">Initial value of the HealthItemHealthItemId property.</param>
        public static HealthItemNote CreateHealthItemNote(global::System.Guid noteId, global::System.String createdDate, global::System.String updatedDate, global::System.Boolean isActive, global::System.Guid healthItemHealthItemId)
        {
            HealthItemNote healthItemNote = new HealthItemNote();
            healthItemNote.NoteId = noteId;
            healthItemNote.CreatedDate = createdDate;
            healthItemNote.UpdatedDate = updatedDate;
            healthItemNote.IsActive = isActive;
            healthItemNote.HealthItemHealthItemId = healthItemHealthItemId;
            return healthItemNote;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid HealthItemHealthItemId
        {
            get
            {
                return _HealthItemHealthItemId;
            }
            set
            {
                OnHealthItemHealthItemIdChanging(value);
                ReportPropertyChanging("HealthItemHealthItemId");
                _HealthItemHealthItemId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("HealthItemHealthItemId");
                OnHealthItemHealthItemIdChanged();
            }
        }
        private global::System.Guid _HealthItemHealthItemId;
        partial void OnHealthItemHealthItemIdChanging(global::System.Guid value);
        partial void OnHealthItemHealthItemIdChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="RemoteHealth", Name="HealthItemType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class HealthItemType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new HealthItemType object.
        /// </summary>
        /// <param name="healthItemTypeId">Initial value of the HealthItemTypeId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="version">Initial value of the Version property.</param>
        public static HealthItemType CreateHealthItemType(global::System.Guid healthItemTypeId, global::System.String name, global::System.String version)
        {
            HealthItemType healthItemType = new HealthItemType();
            healthItemType.HealthItemTypeId = healthItemTypeId;
            healthItemType.Name = name;
            healthItemType.Version = version;
            return healthItemType;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid HealthItemTypeId
        {
            get
            {
                return _HealthItemTypeId;
            }
            set
            {
                if (_HealthItemTypeId != value)
                {
                    OnHealthItemTypeIdChanging(value);
                    ReportPropertyChanging("HealthItemTypeId");
                    _HealthItemTypeId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("HealthItemTypeId");
                    OnHealthItemTypeIdChanged();
                }
            }
        }
        private global::System.Guid _HealthItemTypeId;
        partial void OnHealthItemTypeIdChanging(global::System.Guid value);
        partial void OnHealthItemTypeIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Version
        {
            get
            {
                return _Version;
            }
            set
            {
                OnVersionChanging(value);
                ReportPropertyChanging("Version");
                _Version = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Version");
                OnVersionChanged();
            }
        }
        private global::System.String _Version;
        partial void OnVersionChanging(global::System.String value);
        partial void OnVersionChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="RemoteHealth", Name="Location")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Location : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Location object.
        /// </summary>
        /// <param name="locationId">Initial value of the LocationId property.</param>
        /// <param name="locationName">Initial value of the LocationName property.</param>
        public static Location CreateLocation(global::System.Guid locationId, global::System.String locationName)
        {
            Location location = new Location();
            location.LocationId = locationId;
            location.LocationName = locationName;
            return location;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid LocationId
        {
            get
            {
                return _LocationId;
            }
            set
            {
                if (_LocationId != value)
                {
                    OnLocationIdChanging(value);
                    ReportPropertyChanging("LocationId");
                    _LocationId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("LocationId");
                    OnLocationIdChanged();
                }
            }
        }
        private global::System.Guid _LocationId;
        partial void OnLocationIdChanging(global::System.Guid value);
        partial void OnLocationIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LocationName
        {
            get
            {
                return _LocationName;
            }
            set
            {
                OnLocationNameChanging(value);
                ReportPropertyChanging("LocationName");
                _LocationName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LocationName");
                OnLocationNameChanged();
            }
        }
        private global::System.String _LocationName;
        partial void OnLocationNameChanging(global::System.String value);
        partial void OnLocationNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LocationDetails
        {
            get
            {
                return _LocationDetails;
            }
            set
            {
                OnLocationDetailsChanging(value);
                ReportPropertyChanging("LocationDetails");
                _LocationDetails = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LocationDetails");
                OnLocationDetailsChanged();
            }
        }
        private global::System.String _LocationDetails;
        partial void OnLocationDetailsChanging(global::System.String value);
        partial void OnLocationDetailsChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="RemoteHealth", Name="Note")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    [KnownTypeAttribute(typeof(VisitNote))]
    [KnownTypeAttribute(typeof(PatientNote))]
    [KnownTypeAttribute(typeof(HealthItemNote))]
    public abstract partial class Note : EntityObject
    {
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid NoteId
        {
            get
            {
                return _NoteId;
            }
            set
            {
                if (_NoteId != value)
                {
                    OnNoteIdChanging(value);
                    ReportPropertyChanging("NoteId");
                    _NoteId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("NoteId");
                    OnNoteIdChanged();
                }
            }
        }
        private global::System.Guid _NoteId;
        partial void OnNoteIdChanging(global::System.Guid value);
        partial void OnNoteIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CreatedDate
        {
            get
            {
                return _CreatedDate;
            }
            set
            {
                OnCreatedDateChanging(value);
                ReportPropertyChanging("CreatedDate");
                _CreatedDate = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("CreatedDate");
                OnCreatedDateChanged();
            }
        }
        private global::System.String _CreatedDate;
        partial void OnCreatedDateChanging(global::System.String value);
        partial void OnCreatedDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String UpdatedDate
        {
            get
            {
                return _UpdatedDate;
            }
            set
            {
                OnUpdatedDateChanging(value);
                ReportPropertyChanging("UpdatedDate");
                _UpdatedDate = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("UpdatedDate");
                OnUpdatedDateChanged();
            }
        }
        private global::System.String _UpdatedDate;
        partial void OnUpdatedDateChanging(global::System.String value);
        partial void OnUpdatedDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsActive
        {
            get
            {
                return _IsActive;
            }
            set
            {
                OnIsActiveChanging(value);
                ReportPropertyChanging("IsActive");
                _IsActive = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsActive");
                OnIsActiveChanged();
            }
        }
        private global::System.Boolean _IsActive;
        partial void OnIsActiveChanging(global::System.Boolean value);
        partial void OnIsActiveChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RemoteHealth", "NotesClinicians", "Clinicians")]
        public Clinicians Clinician
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Clinicians>("RemoteHealth.NotesClinicians", "Clinicians").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Clinicians>("RemoteHealth.NotesClinicians", "Clinicians").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Clinicians> ClinicianReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Clinicians>("RemoteHealth.NotesClinicians", "Clinicians");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Clinicians>("RemoteHealth.NotesClinicians", "Clinicians", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="RemoteHealth", Name="Patient")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Patient : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Patient object.
        /// </summary>
        /// <param name="patientId">Initial value of the PatientId property.</param>
        /// <param name="lastName">Initial value of the LastName property.</param>
        /// <param name="firstName">Initial value of the FirstName property.</param>
        /// <param name="dateOfBirth">Initial value of the DateOfBirth property.</param>
        /// <param name="createdDate">Initial value of the CreatedDate property.</param>
        /// <param name="updatedDate">Initial value of the UpdatedDate property.</param>
        /// <param name="gender">Initial value of the Gender property.</param>
        public static Patient CreatePatient(global::System.Guid patientId, global::System.String lastName, global::System.String firstName, global::System.DateTime dateOfBirth, global::System.DateTime createdDate, global::System.DateTime updatedDate, global::System.Int32 gender)
        {
            Patient patient = new Patient();
            patient.PatientId = patientId;
            patient.LastName = lastName;
            patient.FirstName = firstName;
            patient.DateOfBirth = dateOfBirth;
            patient.CreatedDate = createdDate;
            patient.UpdatedDate = updatedDate;
            patient.Gender = gender;
            return patient;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid PatientId
        {
            get
            {
                return _PatientId;
            }
            set
            {
                if (_PatientId != value)
                {
                    OnPatientIdChanging(value);
                    ReportPropertyChanging("PatientId");
                    _PatientId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PatientId");
                    OnPatientIdChanged();
                }
            }
        }
        private global::System.Guid _PatientId;
        partial void OnPatientIdChanging(global::System.Guid value);
        partial void OnPatientIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LastName
        {
            get
            {
                return _LastName;
            }
            set
            {
                OnLastNameChanging(value);
                ReportPropertyChanging("LastName");
                _LastName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LastName");
                OnLastNameChanged();
            }
        }
        private global::System.String _LastName;
        partial void OnLastNameChanging(global::System.String value);
        partial void OnLastNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FirstName
        {
            get
            {
                return _FirstName;
            }
            set
            {
                OnFirstNameChanging(value);
                ReportPropertyChanging("FirstName");
                _FirstName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FirstName");
                OnFirstNameChanged();
            }
        }
        private global::System.String _FirstName;
        partial void OnFirstNameChanging(global::System.String value);
        partial void OnFirstNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateOfBirth
        {
            get
            {
                return _DateOfBirth;
            }
            set
            {
                OnDateOfBirthChanging(value);
                ReportPropertyChanging("DateOfBirth");
                _DateOfBirth = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateOfBirth");
                OnDateOfBirthChanged();
            }
        }
        private global::System.DateTime _DateOfBirth;
        partial void OnDateOfBirthChanging(global::System.DateTime value);
        partial void OnDateOfBirthChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime CreatedDate
        {
            get
            {
                return _CreatedDate;
            }
            set
            {
                OnCreatedDateChanging(value);
                ReportPropertyChanging("CreatedDate");
                _CreatedDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedDate");
                OnCreatedDateChanged();
            }
        }
        private global::System.DateTime _CreatedDate;
        partial void OnCreatedDateChanging(global::System.DateTime value);
        partial void OnCreatedDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime UpdatedDate
        {
            get
            {
                return _UpdatedDate;
            }
            set
            {
                OnUpdatedDateChanging(value);
                ReportPropertyChanging("UpdatedDate");
                _UpdatedDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UpdatedDate");
                OnUpdatedDateChanged();
            }
        }
        private global::System.DateTime _UpdatedDate;
        partial void OnUpdatedDateChanging(global::System.DateTime value);
        partial void OnUpdatedDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Gender
        {
            get
            {
                return _Gender;
            }
            set
            {
                OnGenderChanging(value);
                ReportPropertyChanging("Gender");
                _Gender = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Gender");
                OnGenderChanged();
            }
        }
        private global::System.Int32 _Gender;
        partial void OnGenderChanging(global::System.Int32 value);
        partial void OnGenderChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.Byte[] Image
        {
            get
            {
                return StructuralObject.GetValidValue(_Image);
            }
            set
            {
                OnImageChanging(value);
                ReportPropertyChanging("Image");
                _Image = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Image");
                OnImageChanged();
            }
        }
        private global::System.Byte[] _Image;
        partial void OnImageChanging(global::System.Byte[] value);
        partial void OnImageChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RemoteHealth", "PatientPatientIdentifiers", "PatientIdentifiers")]
        public EntityCollection<PatientIdentifiers> PatientIdentifiers
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PatientIdentifiers>("RemoteHealth.PatientPatientIdentifiers", "PatientIdentifiers");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PatientIdentifiers>("RemoteHealth.PatientPatientIdentifiers", "PatientIdentifiers", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RemoteHealth", "PatientPatientNotes", "PatientNotes")]
        public EntityCollection<PatientNote> PatientNotes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PatientNote>("RemoteHealth.PatientPatientNotes", "PatientNotes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PatientNote>("RemoteHealth.PatientPatientNotes", "PatientNotes", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="RemoteHealth", Name="PatientIdentifiers")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PatientIdentifiers : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new PatientIdentifiers object.
        /// </summary>
        /// <param name="identifierType">Initial value of the IdentifierType property.</param>
        /// <param name="identifierValue">Initial value of the IdentifierValue property.</param>
        /// <param name="patientPatientId">Initial value of the PatientPatientId property.</param>
        /// <param name="identifierName">Initial value of the IdentifierName property.</param>
        public static PatientIdentifiers CreatePatientIdentifiers(global::System.Int32 identifierType, global::System.String identifierValue, global::System.Guid patientPatientId, global::System.String identifierName)
        {
            PatientIdentifiers patientIdentifiers = new PatientIdentifiers();
            patientIdentifiers.IdentifierType = identifierType;
            patientIdentifiers.IdentifierValue = identifierValue;
            patientIdentifiers.PatientPatientId = patientPatientId;
            patientIdentifiers.IdentifierName = identifierName;
            return patientIdentifiers;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 IdentifierType
        {
            get
            {
                return _IdentifierType;
            }
            set
            {
                if (_IdentifierType != value)
                {
                    OnIdentifierTypeChanging(value);
                    ReportPropertyChanging("IdentifierType");
                    _IdentifierType = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IdentifierType");
                    OnIdentifierTypeChanged();
                }
            }
        }
        private global::System.Int32 _IdentifierType;
        partial void OnIdentifierTypeChanging(global::System.Int32 value);
        partial void OnIdentifierTypeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String IdentifierValue
        {
            get
            {
                return _IdentifierValue;
            }
            set
            {
                OnIdentifierValueChanging(value);
                ReportPropertyChanging("IdentifierValue");
                _IdentifierValue = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("IdentifierValue");
                OnIdentifierValueChanged();
            }
        }
        private global::System.String _IdentifierValue;
        partial void OnIdentifierValueChanging(global::System.String value);
        partial void OnIdentifierValueChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid PatientPatientId
        {
            get
            {
                return _PatientPatientId;
            }
            set
            {
                if (_PatientPatientId != value)
                {
                    OnPatientPatientIdChanging(value);
                    ReportPropertyChanging("PatientPatientId");
                    _PatientPatientId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PatientPatientId");
                    OnPatientPatientIdChanged();
                }
            }
        }
        private global::System.Guid _PatientPatientId;
        partial void OnPatientPatientIdChanging(global::System.Guid value);
        partial void OnPatientPatientIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String IdentifierName
        {
            get
            {
                return _IdentifierName;
            }
            set
            {
                OnIdentifierNameChanging(value);
                ReportPropertyChanging("IdentifierName");
                _IdentifierName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("IdentifierName");
                OnIdentifierNameChanged();
            }
        }
        private global::System.String _IdentifierName;
        partial void OnIdentifierNameChanging(global::System.String value);
        partial void OnIdentifierNameChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="RemoteHealth", Name="PatientNote")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PatientNote : Note
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new PatientNote object.
        /// </summary>
        /// <param name="noteId">Initial value of the NoteId property.</param>
        /// <param name="createdDate">Initial value of the CreatedDate property.</param>
        /// <param name="updatedDate">Initial value of the UpdatedDate property.</param>
        /// <param name="isActive">Initial value of the IsActive property.</param>
        /// <param name="patientId">Initial value of the PatientId property.</param>
        public static PatientNote CreatePatientNote(global::System.Guid noteId, global::System.String createdDate, global::System.String updatedDate, global::System.Boolean isActive, global::System.Guid patientId)
        {
            PatientNote patientNote = new PatientNote();
            patientNote.NoteId = noteId;
            patientNote.CreatedDate = createdDate;
            patientNote.UpdatedDate = updatedDate;
            patientNote.IsActive = isActive;
            patientNote.PatientId = patientId;
            return patientNote;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid PatientId
        {
            get
            {
                return _PatientId;
            }
            set
            {
                OnPatientIdChanging(value);
                ReportPropertyChanging("PatientId");
                _PatientId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PatientId");
                OnPatientIdChanged();
            }
        }
        private global::System.Guid _PatientId;
        partial void OnPatientIdChanging(global::System.Guid value);
        partial void OnPatientIdChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="RemoteHealth", Name="Visit")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Visit : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Visit object.
        /// </summary>
        /// <param name="visitId">Initial value of the VisitId property.</param>
        /// <param name="visitDate">Initial value of the VisitDate property.</param>
        public static Visit CreateVisit(global::System.Guid visitId, global::System.DateTime visitDate)
        {
            Visit visit = new Visit();
            visit.VisitId = visitId;
            visit.VisitDate = visitDate;
            return visit;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid VisitId
        {
            get
            {
                return _VisitId;
            }
            set
            {
                if (_VisitId != value)
                {
                    OnVisitIdChanging(value);
                    ReportPropertyChanging("VisitId");
                    _VisitId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("VisitId");
                    OnVisitIdChanged();
                }
            }
        }
        private global::System.Guid _VisitId;
        partial void OnVisitIdChanging(global::System.Guid value);
        partial void OnVisitIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime VisitDate
        {
            get
            {
                return _VisitDate;
            }
            set
            {
                OnVisitDateChanging(value);
                ReportPropertyChanging("VisitDate");
                _VisitDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("VisitDate");
                OnVisitDateChanged();
            }
        }
        private global::System.DateTime _VisitDate;
        partial void OnVisitDateChanging(global::System.DateTime value);
        partial void OnVisitDateChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RemoteHealth", "VisitLocation", "Location")]
        public Location Location
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Location>("RemoteHealth.VisitLocation", "Location").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Location>("RemoteHealth.VisitLocation", "Location").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Location> LocationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Location>("RemoteHealth.VisitLocation", "Location");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Location>("RemoteHealth.VisitLocation", "Location", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RemoteHealth", "VisitClinicians", "Clinicians")]
        public EntityCollection<Clinicians> Clinicians
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Clinicians>("RemoteHealth.VisitClinicians", "Clinicians");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Clinicians>("RemoteHealth.VisitClinicians", "Clinicians", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RemoteHealth", "VisitVisitNotes", "VisitNotes")]
        public EntityCollection<VisitNote> VisitNotes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<VisitNote>("RemoteHealth.VisitVisitNotes", "VisitNotes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<VisitNote>("RemoteHealth.VisitVisitNotes", "VisitNotes", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RemoteHealth", "VisitHealthItem", "HealthItem")]
        public EntityCollection<HealthItem> HealthItems
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<HealthItem>("RemoteHealth.VisitHealthItem", "HealthItem");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<HealthItem>("RemoteHealth.VisitHealthItem", "HealthItem", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="RemoteHealth", Name="VisitNote")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class VisitNote : Note
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new VisitNote object.
        /// </summary>
        /// <param name="noteId">Initial value of the NoteId property.</param>
        /// <param name="createdDate">Initial value of the CreatedDate property.</param>
        /// <param name="updatedDate">Initial value of the UpdatedDate property.</param>
        /// <param name="isActive">Initial value of the IsActive property.</param>
        /// <param name="visitId">Initial value of the VisitId property.</param>
        public static VisitNote CreateVisitNote(global::System.Guid noteId, global::System.String createdDate, global::System.String updatedDate, global::System.Boolean isActive, global::System.Guid visitId)
        {
            VisitNote visitNote = new VisitNote();
            visitNote.NoteId = noteId;
            visitNote.CreatedDate = createdDate;
            visitNote.UpdatedDate = updatedDate;
            visitNote.IsActive = isActive;
            visitNote.VisitId = visitId;
            return visitNote;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid VisitId
        {
            get
            {
                return _VisitId;
            }
            set
            {
                OnVisitIdChanging(value);
                ReportPropertyChanging("VisitId");
                _VisitId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("VisitId");
                OnVisitIdChanged();
            }
        }
        private global::System.Guid _VisitId;
        partial void OnVisitIdChanging(global::System.Guid value);
        partial void OnVisitIdChanged();

        #endregion
    
    }

    #endregion
    
}
